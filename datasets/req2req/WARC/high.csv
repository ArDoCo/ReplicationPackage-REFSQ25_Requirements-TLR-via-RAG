id,text
FR01,Any software tool or application based on libwarc shall require just a single header file.
FR02,"The libwarc interfaces shall fully encapsulate and internal functionality, isolating by abstraction any tool or application based on libwarc from changes in the internal implementation."
FR03,"Libwarc shall provide a range of functions through a universal interface for creating each type of valid WARC-record, thus ensuring the resulting WARC files conform to the prevailing WARC standard"
FR04,"For each type of WARC-record, a set of functions shall be made available to create/modify the records properties."
FR05,"Libwarc shall provide a range of functions through a universal interface for reading a range of valid WARC-records"
FR06,Libwarc shall provide a stable Application Programme Interface (API) to handle WARCrecords as abstract objects (ADT)
FR07,Libwarc shall provide ARC-record reader functionality Libwarc reader will thereby make read operations as simple as possible.
FR08,Libwarc shall provide a default iterator as a built-in function
FR09,Libwarc shall provide a records iterator to handle WARC-type records
FR10,"Libwarc shall provide a MIMES iterator to handle MIME-types payloads"
FR11,Iterators can use exact pattern search or regex expressions
FR12,"Libwarc shall provide an abstract interface for iterators, to enable custom iterators"
FR13,"Libwarc shall enable combinations of iterators to be used, i.e. composite iterators"
FR14,"Libwarc shall be memory safe and manage dynamic memory internally"
FR15,"Libwarc shall use disk-based working memory"
FR16,Dynamic memory management shall be hidden inside libwarc
FR17,"Libwarc shall use gzip as the default compression format"
FR18,"Libwarc shall provide a plug-in interface to enable use of alternative compression libraries, such as ""gzip2"", ""7zip"", etc."
FR19,Libwarc shall manage all write and read access
FR20,"WARC files shall be validated using a command line tool, ""w-validator"", which will enable validation or rejection of WARC files."
FR21,"WARC Browser shall provide an API that allows browsing of WARC files and associated CDX files via an HTTP server"
FR22,WARC Browser shall support a rewriting interface
FR23,WARC Browser shall support a proxy-style interface
FR24,An Apache and Lighttp plug-in shall provide access to the libwarc API and WARC Browser over http
FR25,"It shall be possible to convert ARC files to WARC files using a command-line tool called ""arc2warc"""
FR26,ARC to WARC conversions made by arc2warc shall be carried out according to a specification in a configuration file
FR27,"It shall be possible to collect HTTrack data from the directories output by HTTrack and write the data to WARC files"
FR28,"It shall be possible to walk a wget mirror and write the data to WARC files"
FR29,"It shall be possible to walk a curl directory and write the data to WARC files"
FR30,"It shall be possible to collect arbitrary web content, such as html files, images etc. (for example from a web server document root directory), and write the data to WARC files"
FR31,A Python script shall be made available to enable rapid development of WARC based solutions
FR32,"WARC extensions shall be released as a patch to each of the commands ""curl"", ""wget"", and ""httrack"" projects"
FR33,"WARC extensions help content will be provided each of the commands ""curl"", ""wget"", and ""httrack"""
FR34,"It shall be possible to identify WARC files using the unix ""file"" command"
FR35,"It shall be possible to identify and validate WARC files using ""Jhove"""
FR36,"A Jhove plugin module and an output handler shall be made available for WARC files"
FR37,WARC files in various test-states shall be provided that test the Jhove deliverables
FR38,"The C library shall be implemented to be compatible with the Simplified Wrapper and Interface Generator (SWIG, http://www.swig.org) - a wrapper for libwarc C code to allow it to be called natively in a wide variety of languages."
FR39,"A Python interface shall be implemented"
FR40,A Java interface shall be implemented
FR41,"An independent Java implementation of libwarc may be implemented"
FR42,The functionality of the library shall be exposed in such a way as to fit the metaphors and paradigms of the implementation language
